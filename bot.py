import config
import db
import asyncio
import feedparser
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.contrib.fsm_storage.memory import MemoryStorage


loop = asyncio.get_event_loop()
storage = MemoryStorage()

bot = Bot(token=config.token, loop=loop)
dp = Dispatcher(bot, storage=storage)


# States
FILTER_BY = ''
URL = ''
JOB_ID = ''


base_category_url = 'https://admin10.rabota.ua/Export/Vacancy/feed.ashx?parentId='
base_region_url = 'https://admin10.rabota.ua/Export/Vacancy/feed.ashx?regionId='

category = {'HR —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã - –ë–∏–∑–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä—ã': 3,
            'IT': 1,
            '–ê–≤—Ç–æ–±–∏–∑–Ω–µ—Å - –°–µ—Ä–≤–∏—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ': 33,
            '–ê–¥–º–∏–Ω. –ø–µ—Ä—Å–æ–Ω–∞–ª - –í–æ–¥–∏—Ç–µ–ª–∏ - –ö—É—Ä—å–µ—Ä—ã': 11,
            '–ë–∞–Ω–∫–∏ - –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ - –õ–∏–∑–∏–Ω–≥': 18,
            '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è - –ù–∞–ª–æ–≥–∏ - –§–∏–Ω–∞–Ω—Å—ã –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è' : 6,
            '–ì–æ—Å—Ç–∏–Ω–∏—Ü—ã - –†–µ—Å—Ç–æ—Ä–∞–Ω—ã - –ö–∞—Ñ–µ': 8,
            '–ì–æ—Å. —É—á—Ä–µ–∂–¥–µ–Ω–∏—è - –ú–µ—Å—Ç–Ω–æ–µ —Å–∞–º–æ—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ': 34,
            '–î–∏–∑–∞–π–Ω - –ì—Ä–∞—Ñ–∏–∫–∞ - –§–æ—Ç–æ': 15,
            '–ó–∞–∫—É–ø–∫–∏ - –°–Ω–∞–±–∂–µ–Ω–∏–µ': 31,
            '–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - –ê—É–¥–∏—Ç': 14,
            '–ö—É–ª—å—Ç—É—Ä–∞ - –®–æ—É-–±–∏–∑–Ω–µ—Å - –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 21,
            '–õ–æ–≥–∏—Å—Ç–∏–∫–∞ - –¢–∞–º–æ–∂–Ω—è - –°–∫–ª–∞–¥': 5,
            '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ - –†–µ–∫–ª–∞–º–∞ - PR': 24,
            '–ú–µ–¥–∏–∞ - –ò–∑–¥–∞—Ç–µ–ª—å—Å–∫–æ–µ –¥–µ–ª–æ': 22,
            '–ú–µ–¥–∏—Ü–∏–Ω–∞ - –§–∞—Ä–º–∞—Ü–µ–≤—Ç–∏–∫–∞ - –ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ': 9,
            '–ú–æ—Ä—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏': 25,
            '–ù–∞—É–∫–∞ - –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ - –ü–µ—Ä–µ–≤–æ–¥': 10,
            '–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å': 28,
            '–ù–µ–∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ - –û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏':13,
            '–û—Ö—Ä–∞–Ω–∞ - –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –°–∏–ª–æ–≤—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã': 4,
            '–ü—Ä–æ–¥–∞–∂–∏ - –ö–ª–∏–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç': 17,
            '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ - –ò–Ω–∂–µ–Ω–µ—Ä—ã - –¢–µ—Ö–Ω–æ–ª–æ–≥–∏': 32,
            '–†–∞–±–æ—á–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ - –ü–µ—Ä—Å–æ–Ω–∞–ª –¥–ª—è –¥–æ–º–∞': 20,
            '–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ - –ê–≥—Ä–æ–±–∏–∑–Ω–µ—Å - –õ–µ—Å–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ': 26,
            '–°–ø–æ—Ä—Ç - –ö—Ä–∞—Å–æ—Ç–∞ - –û–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ': 7,
            '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ': 19,
            '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞': 27,
            '–°—Ç—É–¥–µ–Ω—Ç—ã - –ù–∞—á–∞–ª–æ –∫–∞—Ä—å–µ—Ä—ã - –ë–µ–∑ –æ–ø—ã—Ç–∞': 30,
            '–¢–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ - –°–≤—è–∑—å': 2,
            '–¢–æ–ø-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç - –î–∏—Ä–µ–∫—Ç–æ—Ä–∞': 12,
            '–¢–æ—Ä–≥–æ–≤–ª—è': 16,
            '–¢—É—Ä–∏–∑–º - –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': 23,
            '–Æ—Ä–∏—Å—Ç—ã, –∞–¥–≤–æ–∫–∞—Ç—ã, –Ω–æ—Ç–∞—Ä–∏—É—Å—ã': 29
}

region = {'–ë–µ–ª–∞—è –¶–µ—Ä–∫–æ–≤—å': 215,
          '–ë–æ—Ä–∏—Å–ø–æ–ª—å': 218,
          '–ë—Ä–æ–≤–∞—Ä—ã': 221,
          '–í–∏–Ω–Ω–∏—Ü–∞': 5,
          '–í–∏—à–Ω–µ–≤–æ–µ': 571,
          '–î–Ω–µ–ø—Ä': 4,
          '–î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã': 34,
          '–ñ–∏—Ç–æ–º–∏—Ä': 7,
          '–ó–∞–∫–∞—Ä–ø–∞—Ç—å–µ': 8,
          '–ó–∞–ø–æ—Ä–æ–∂—å–µ': 9,
          '–ò–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫–æ–≤—Å–∫': 10,
          '–ò—Ä–ø–µ–Ω—å': 229,
          '–ö–∞–º–µ–Ω—Å–∫–æ–µ': 82,
          '–ö–∏–µ–≤': 1,
          '–ö—Ä–∞–º–∞—Ç–æ—Ä—Å–∫': 121,
          '–ö—Ä–µ–º–µ–Ω—á—É–≥': 35,
          '–ö—Ä–∏–≤–æ–π –†–æ–≥': 31,
          '–ö—Ä–æ–ø–∏–≤–Ω–∏—Ü–∫–∏–π': 11,
          '–õ—É—Ü–∫': 14,
          '–õ—å–≤–æ–≤': 2,
          '–ú–∞—Ä–∏—É–ø–æ–ª—å': 27,
          '–ù–∏–∫–æ–ª–∞–µ–≤': 15,
          '–û–¥–µ—Å—Å–∞': 3,
          '–ü–æ–ª—Ç–∞–≤–∞': 17,
          '–†–æ–≤–Ω–æ': 18,
          '–°—É–º—ã': 19,
          '–¢–µ—Ä–Ω–æ–ø–æ–ª—å': 20,
          '–£–∂–≥–æ—Ä–æ–¥': 28,
          '–•–∞—Ä—å–∫–æ–≤': 21,
          '–•–µ—Ä—Å–æ–Ω': 22,
          '–•–º–µ–ª—å–Ω–∏—Ü–∫–∏–π': 23,
          '–ß–µ—Ä–∫–∞—Å—Å—ã': 24,
          '–ß–µ—Ä–Ω–∏–≥–æ–≤': 25,
          '–ß–µ—Ä–Ω–æ–≤—Ü—ã': 26


}

@dp.message_handler(func=lambda c: True)
@dp.message_handler(commands=['start'])
async def start_process(msg: types.Message):

    keyboard = types.InlineKeyboardMarkup()
    category_btn = types.InlineKeyboardButton(text='üíº –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', callback_data='category')
    region_btn = types.InlineKeyboardButton(text='üá∫üá¶ –ü–æ —Ä–µ–≥–∏–æ–Ω–∞–º', callback_data='region')
    keyboard.add(category_btn)
    keyboard.insert(region_btn)

    try:
        if msg.data == 'start':

            await bot.edit_message_reply_markup(msg.message.chat.id, msg.message.message_id, reply_markup=keyboard)
    except AttributeError:

        await bot.send_message(msg.chat.id, 'üîé –ë—É–¥–µ–º –∏—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É üîé', reply_markup=keyboard)



@dp.callback_query_handler(func=lambda c: c.data == 'category')
async def category_process(callback: types.InlineQuery):

    await storage.update_data(chat=callback.message.chat.id, user=callback.message.from_user.id, filter_by=callback.data)

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*[types.InlineKeyboardButton(text=i, callback_data=category[i]) for i in category])
    keyboard.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start'))
    await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=keyboard)

@dp.callback_query_handler(func=lambda c: c.data == 'region')
async def region_process(callback):

    await storage.update_data(chat=callback.message.chat.id, user=callback.message.from_user.id,
                              filter_by=callback.data)

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(*[types.InlineKeyboardButton(text=i, callback_data=region[i]) for i in region])
    keyboard.add(types.InlineKeyboardButton(text='‚Ü©Ô∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='start'))

    await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=keyboard)


@dp.callback_query_handler(func= lambda c: c.data.isdigit())
async def url_process(callback):

    with dp.current_state(chat=callback.message.chat.id, user=callback.message.from_user.id) as state:

        await state.update_data(url=callback.data)
        data = await state.get_data()



    if data['filter_by'] == 'category':
        msg = [k for k,v in category.items() if v == int(data['url'])]
        link = base_category_url + callback.data
    elif data['filter_by'] == 'region':
        msg = [k for k, v in region.items() if v == int(data['url'])]
        link = base_region_url + callback.data

    d = feedparser.parse(link)
    job = d.entries[0]
    data['job_id'] = job.id

    user = db.session.query(db.User).filter_by(user_id=callback.message.chat.id).first()
    if user:
        user.data = data
        db.session.commit()
    else:
        user = db.User(user_id=callback.message.chat.id, data=data)
        db.session.add(user)
        try:
            db.session.commit()
        except:
            db.session.rollback()
            await bot.send_message(callback.message.chat.id, '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω...')

    await bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id)
    await bot.send_message(callback.message.chat.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ {}\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{}'.format(msg[0], job.id))


@dp.callback_query_handler(func= lambda c: c.data == 'start')
async def back(callback):
    await start_process(callback)


async def shutdown(dispatcher: Dispatcher):
    await dispatcher.storage.close()
    await dispatcher.storage.wait_closed()
    db.session.close_all()


async def sched():
    for user in db.session.query(db.User).all():

        if user.data['filter_by'] == 'category':
            link = base_category_url + user.data['url']
        elif user.data['filter_by'] == 'region':
            link = base_region_url + user.data['url']

        d = feedparser.parse(link)
        job = d.entries[0]

        if user.data['job_id'] != job.id:

            user.data['job_id'] = job.id
            db.session.commit()
            await bot.send_message(user.user_id, job.id)


scheduler = AsyncIOScheduler()
scheduler.add_job(sched, 'interval', seconds=60)
scheduler.start()


if __name__ == '__main__':
    executor.start_polling(dp, loop=loop, skip_updates=True, on_shutdown=shutdown)
